TFSOLO.BalancingFuncs.push(function(kv)
{
	// C.A.P.P.E.R.
	local key1 = kv.FindKey("items")
	local prefab = key1.FindKey("30666")
	// Match pistol prefab, only usable by Enigneer
	prefab.SetString("prefab","")
	prefab.SetInt("baseitem",0)
	prefab.SetInt("enabled",1)
	prefab.SetString("base_item_name","TF_WEAPON_PISTOL")
	prefab.SetInt("inspect_panel_dist",31)
	prefab.SetString("particle_suffix","pistol")
	prefab.SetString("item_class","tf_weapon_pistol")
	prefab.SetString("craft_material_type","weapon")
	prefab.SetInt("show_in_armory",1)
	prefab.SetString("item_type_name","#TF_Weapon_Pistol")
	prefab.SetString("item_slot","secondary")
	prefab.SetString("item_quality"	,"unique")
	prefab.SetInt("min_ilevel",1)
	prefab.SetInt("max_ilevel",1)
	prefab.SetInt("attach_to_hands",1)
	prefab.SetString("mouse_pressed_sound","ui/item_light_gun_pickup.wav")
	prefab.SetString("drop_sound","ui/item_light_gun_drop.wav")
	local capable = prefab.GetKey("capabilities", true)
	capable.SetInt("nameable",1)
	local tags = prefab.GetKey("tags", true)
	tags.SetInt("can_deal_damage",1)
	tags.SetInt("can_deal_critical_damage",1)
	tags.SetInt("can_deal_mvm_penetration_damage",1)
	tags.SetInt("can_deal_long_distance_damage",1)
	local statattrib = prefab.GetKey("static_attrs", true)
	statattrib.SetFloat("weapon_stattrak_module_scale",0.723)
	statattrib.SetString("min_viewmodel_offset","10 0 -10")
	local classuse = prefab.GetKey("used_by_classes", true)
	classuse.SetInt("engineer", 1)
	
	// Add projectile penetration
	local attrib = prefab.GetKey("attributes", true)
	local a1 = attrib.GetKey("projectile penetration", true)
	a1.SetString("attribute_class","projectile_penetration")
	a1.SetInt("value", 16)
	// Add requiring reload to fire
	local a2 = attrib.GetKey("auto fires full clip hidden", true)
	a2.SetString("attribute_class","auto_fires_full_clip")
	a2.SetInt("value",1)
	// Add +10% damage bonus
	local a3 = attrib.GetKey("damage bonus", true)
	a3.SetString("attribute_class","mult_dmg")
	a3.SetFloat("value",1.1)
	// Add -70% clip size
	local a4 = attrib.GetKey("clip size penalty", true)
	a4.SetString("attribute_class","mult_clipsize")
	a4.SetFloat("value",0.3)
})